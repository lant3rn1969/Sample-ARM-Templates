{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Admin username"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password"
      }
    },
    "numberOfWebWinInstances": {
      "type": "int",
      "minValue": 1,
      "defaultValue": 3,
      "metadata": {
        "description": "Number of Windows VM instances to be created behind external load balancer control"
      }
    },
    "numberOfLinuxInstances": {
      "type": "int",
      "minValue": 1,
      "defaultValue": 4,
      "metadata": {
        "description": "Number of Linux VM instances for API to be created behind application gateway control"
      }
    },
    "winWebVMSize": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "Standard_D1_v2",
      "allowedValues": [
        "Basic_A0",
        "Basic_A1",
        "Basic_A2",
        "Basic_A3",
        "Basic_A4",
        "Standard_A0",
        "Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2"
      ]
    },
    "linuxVMSize": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "Standard_D1_v2",
      "allowedValues": [
        "Basic_A0",
        "Basic_A1",
        "Basic_A2",
        "Basic_A3",
        "Basic_A4",
        "Standard_A0",
        "Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2"
      ]
    },
    "winImageSKU": {
      "type": "string",
      "defaultValue": "2012-R2-Datacenter",
      "allowedValues": [
        "2008-R2-SP1",
        "2012-Datacenter",
        "2012-R2-Datacenter"
      ],
      "metadata": {
        "description": "The Windows version for the VM"
      }
    },
    "rhelOSVersion": {
      "type": "string",
      "defaultValue": "6.8",
      "allowedValues": [
        "7.2",
        "7.1",
        "7.0",
        "6.8"
      ],
      "metadata": {
        "description": "The Red Hat Enterprise Linux version for the VM. This will pick a fully patched image of this given Red Hat Enterprise Linux version. Allowed values: 7.2, 7.1, 6.8."
      }
    },
    "diagnosticsStorageName": {
      "type": "string"
    },
    "webSubnetRef": {
      "type": "string"
    },
    "webSubnetStartIp": {
      "type": "string"
    } 
  },
  "variables": {
    "winWebNamePrefix": "OpSheetWinWeb",
    "linuxNamePrefix": "OpSheetLinux",
    "webVhdStorageType": "Standard_LRS",
    "webVhdStorageName": "[take(concat('webvhds', uniqueString(resourceGroup().id)), 24)]",
    "winWebAvailabilitySetName": "winWebAvSet",
    "linuxAvailabilitySetName": "linuxAvSet",
    "winImagePublisher": "MicrosoftWindowsServer",
    "winImageOffer": "WindowsServer",
    "linuxImagePublisher": "RedHat",
    "linuxImageOffer": "RHEL",
    "winWebNicNamePrefix": "WinWebVMNic",
    "linuxNicNamePrefix": "LinuxVMNic",
    "winLBPublicIPName": "winLoadBalancerPIP",
    "winLoadBalancerName": "WinWebLB",
    "winLBpublicIPRef": "[resourceId('Microsoft.Network/publicIPAddresses',variables('winLBPublicIPName'))]",
    "winLBId": "[resourceId('Microsoft.Network/loadBalancers', variables('winLoadBalancerName'))]",
    "apiVersion": "2015-06-15"
  },
  "resources": [
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('webVhdStorageName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "Web VHD Storage Account"
      },
      "properties": {
        "accountType": "[variables('webVhdStorageType')]"
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('winLBPublicIPName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('winWebAvailabilitySetName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "AvailabilitySet"
      },
      "properties": {
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('linuxAvailabilitySetName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "AvailabilitySet"
      },
      "properties": {
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('winWebNicNamePrefix'), copyindex())]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "NetworkInterface"
      },
      "copy": {
        "name": "winNicLoop",
        "count": "[parameters('numberOfWebWinInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('winLoadBalancerName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[parameters('webSubnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('winLBId'), '/backendAddressPools/BackendPool')]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('linuxNicNamePrefix'), copyindex())]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "NetworkInterface"
      },
      "copy": {
        "name": "linuxNicLoop",
        "count": "[parameters('numberOfLinuxInstances')]"
      },
      "dependsOn": [
        "winNicLoop"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[concat(take(parameters('webSubnetStartIp'), sub(length(parameters('webSubnetStartIp')), length(split(parameters('webSubnetStartIp'), '.')[3]))), add(int(split(parameters('webSubnetStartIp'), '.')[3]), copyIndex()))]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[parameters('webSubnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('winWebNamePrefix'), copyindex())]",
      "copy": {
        "name": "virtualMachineLoop",
        "count": "[parameters('numberOfWebWinInstances')]"
      },
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "VirtualMachines"
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('webVhdStorageName'))]",
        "winNicLoop",
        "[concat('Microsoft.Compute/availabilitySets/', variables('winWebAvailabilitySetName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('winWebAvailabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('winWebVMSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('winWebNamePrefix'), copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('winImagePublisher')]",
            "offer": "[variables('winImageOffer')]",
            "sku": "[parameters('winImageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('https://', variables('webVhdStorageName'), '.blob.core.windows.net/vhds/', 'winwebosdisk', copyindex(), '.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "vhd": {
                "uri": "[concat('http://',variables('webVhdStorageName'),'.blob.core.windows.net/vhds/', 'winwebdatadisk', copyindex(), '.vhd')]"
              },
              "name": "[concat(variables('winWebNamePrefix'), copyindex(),'-data-disk0')]",
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": "100",
              "lun": 0
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('winWebNicNamePrefix'), copyindex()))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat('https://', parameters('diagnosticsStorageName'), '.blob.core.windows.net')]"
          }
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('linuxNamePrefix'), copyindex())]",
      "copy": {
        "name": "virtualMachineLoop",
        "count": "[parameters('numberOfLinuxInstances')]"
      },
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "VirtualMachines"
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('webVhdStorageName'))]",
        "linuxNicLoop",
        "[concat('Microsoft.Compute/availabilitySets/', variables('linuxAvailabilitySetName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('linuxAvailabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('linuxVMSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('linuxNamePrefix'), copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('linuxImagePublisher')]",
            "offer": "[variables('linuxImageOffer')]",
            "sku": "[parameters('rhelOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('https://', variables('webVhdStorageName'), '.blob.core.windows.net/vhds/', 'linuxapiosdisk', copyindex(), '.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('linuxNicNamePrefix'), copyindex()))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat('https://', parameters('diagnosticsStorageName'), '.blob.core.windows.net')]"
          }
        }
      }
    },
    {
      "name": "[variables('winLoadBalancerName')]",
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "LoadBalancer"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('winLBPublicIPName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontEnd",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[variables('winLBpublicIPRef')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "BackendPool"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBRulePort80",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('winLoadBalancerName')), '/frontendIPConfigurations/LoadBalancerFrontend')]"
              },
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 4,
              "protocol": "Tcp",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('winLoadBalancerName')), '/backendAddressPools/BackendPool')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('winLoadBalancerName')), '/probes/lbprobe80')]"
              }
            }
          },
          {
            "name": "LBRulePort443",
            "properties": {
              "provisioningState": "Succeeded",
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('winLoadBalancerName')), '/frontendIPConfigurations/LoadBalancerFrontend')]"
              },
              "frontendPort": 443,
              "backendPort": 443,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 4,
              "protocol": "Tcp",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('winLoadBalancerName')), '/backendAddressPools/BackendPool')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('winLoadBalancerName')), '/probes/lbprobe443')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "LBProbe443",
            "properties": {
              "protocol": "Tcp",
              "port": 443,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            }
          },
          {
            "name": "LBProbe80",
            "properties": {
              "protocol": "Tcp",
              "port": 80,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            }
          }
        ],
        "inboundNatRules": [],
        "outboundNatRules": [],
        "inboundNatPools": []
      }
    }
  ],
  "outputs": {
    "uiIpAddress0": {
      "value": "reference('linuxNicNamePrefix0').ipConfigurations[0].properties.privateIPAddress",
      "type": "string"
    },
    "uiIpAddress1": {
      "value": "reference('linuxNicNamePrefix1').ipConfigurations[0].properties.privateIPAddress",
      "type": "string"
    },
    "apiIpAddress0": {
      "value": "reference('linuxNicNamePrefix2').ipConfigurations[0].properties.privateIPAddress",
      "type": "string"
    },
    "apiIpAddress1": {
      "value": "reference('linuxNicNamePrefix3').ipConfigurations[0].properties.privateIPAddress",
      "type": "string"
    }
  }
}
